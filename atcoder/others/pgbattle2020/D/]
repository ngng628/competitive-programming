#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
# define rep(i,n) for(int i=0, i##_len=(n); i<i##_len; ++i)
# define reps(i,n) for(int i=1, i##_len=(n); i<=i##_len; ++i)
# define rrep(i,n) for(int i=((int)(n)-1); i>=0; --i)
# define rreps(i,n) for(int i=((int)(n)); i>0; --i)
# define repr(i,b,e) for(int i=(b), i##_len=(e); i<i##_len; ++i)
# define reprs(i,b,e) for(int i=(b), i##_len=(e); i<i##_len; ++i)
# define all(v) (v).begin(), (v).end()
# define rall(v) (v).rbegin(), (v).rend()
# define len(v) ((int)v.size())
# define FI first
# define SE second
using namespace std;

struct edge {
    int to, cost;
};

bool operator <(const edge& a, const edge& b) {
    return to_string(a.to) < to_string(b.to);
}
bool operator >(const edge& a, const edge& b) {
    return to_string(a.to) > to_string(b.to);
}

using AdjList = vector<vector<edge>>;
AdjList graph;

using pii = pair<int, int>;

const int INF = 10000000;

vector<int> dist; 
vector<vector<int>>prever;

void dijkstra(int n, int s){
    dist = vector<int>(n, INF);
    prever = vector<int>(n, 999999);
    dist[s] = 0;

    auto comp = [](pii p, pii q) {
        if (p.FI == q.FI) {
            string a = to_string(p.SE);
            string b = to_string(q.SE);
            return a < b;
        } else {
            return p.FI > q.FI;
        }
    };
    priority_queue<pii, vector<pii>, decltype(comp)> que(comp);
    que.push(pii(0, s));

    while (not que.empty()) {
        pii p = que.top(); que.pop();
        int v = p.second;
        if (dist[v] < p.first) continue;
        rep (i, graph[v].size()){
            edge e = graph[v][i];
            if (dist[e.to] >= dist[v] + e.cost) {
                dist[e.to] = dist[v] + e.cost;

                prever[e.to].push_back(v);

                que.push(pii(dist[e.to], e.to));
            }
        }
    }
}

vector<int> get_path(int t) { //頂点tへの最短路
    vector<int> path;
    for(; t != -1;t = prever[t]){
        if (t == 999999) break;
        path.push_back(t);
    }

    reverse(path.begin(), path.end());
    return path;
}

int main(void){
    int n, m;
    cin >> n >> m;
    graph = AdjList(n);
    for(int i=0;i<m;i++){
        int from, to;
        cin >> from >> to;
        from--; to--;
        const int cost = 1;
        graph[from].push_back((edge){to, cost});
    }

    rep (i, n) {
        sort(rall(graph[i]));
    }

    cerr << "====================" << endl;
    dijkstra(n,0);

    cerr << "====================" << endl;
    vector<int> ans = get_path(n - 1);
    cerr << "====================" << endl;
    if (len(ans) == 1) {
        cout << -1 << endl;
        return 0;
    }
    rep (i, len(ans)) {
        if (i < len(ans) - 1) cout << ans[i] + 1 << " ";
        else cout << ans[i] + 1 << endl;
    }
    return 0;
}
